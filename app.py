from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import os
import google.generativeai as genai
import re
import traceback
import json

load_dotenv()

app = Flask(__name__, static_folder='static', template_folder='templates')
CORS(app)

# ‚úÖ Gemini setup with recommended stable model
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
model = genai.GenerativeModel("gemini-1.5-pro-latest")


# ‚úÖ Utility to cap scores at 10
def cap_scores(text):
    return re.sub(r'(\d{2,})/10', lambda m: f"{min(int(m.group(1)), 10)}/10", text)


def clean_json_response(response_text):
    """Clean and extract JSON from markdown code blocks"""
    # Remove markdown code blocks
    if '```json' in response_text:
        response_text = re.sub(r'```json\s*\n?', '', response_text)
        response_text = re.sub(r'\n?\s*```', '', response_text)

    # Remove any extra whitespace
    response_text = response_text.strip()

    return response_text


@app.route("/")
def home():
    return render_template("index.html")


@app.route("/review", methods=["POST"])
def review():
    try:
        data = request.get_json()
        prd_text = data.get("prd_text", "").strip()

        if not prd_text:
            return jsonify({"response": "‚ùå No PRD text provided."}), 400

        prompt = f"""
        You are a senior product reviewer AI. Analyze the PRD below and respond **only** in the following JSON format:

        {{
          "summary": "one-paragraph summary here",
          "scores": {{
            "clarity": number between 0 and 10,
            "structure": number between 0 and 10,
            "completeness": number between 0 and 10,
            "ambiguity": number between 0 and 10,
            "stakeholder_consideration": number between 0 and 10,
            "technical_depth": number between 0 and 10,
            "feasibility": number between 0 and 10,
            "business_impact_alignment": number between 0 and 10
          }},
          "strengths": ["point 1", "point 2"],
          "areas_for_improvement": ["point 1", "point 2"]
        }}

        Rules:
        - Respond with valid JSON only.
        - All fields are mandatory.
        - Each score must be between 0 and 10.
        - Do not write anything outside the JSON.
        - Do not wrap the JSON in markdown code blocks.

        PRD:
        \"\"\"
        {prd_text}
        \"\"\"
        """

        response = model.generate_content(prompt)

        if response.text:
            print("‚úÖ Gemini Raw Response:\n", response.text)

            # Clean the response
            cleaned_response = clean_json_response(response.text)
            cleaned_response = cap_scores(cleaned_response)

            # Validate JSON before sending
            try:
                json.loads(cleaned_response)
                print("‚úÖ JSON validation successful")
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON validation failed: {e}")
                print(f"Cleaned response: {cleaned_response}")
                return jsonify({"response": "‚ùå Invalid JSON generated by AI."}), 500

            return jsonify({"response": cleaned_response})
        else:
            print("‚ö†Ô∏è Gemini returned empty response")
            return jsonify({"response": "‚ùå No response generated by Gemini."}), 500

    except Exception as e:
        print("üî• Error:", e)
        traceback.print_exc()
        return jsonify({"response": f"‚ùå Server error: {str(e)}"}), 500


if __name__ == "__main__":
    app.run(debug=True)